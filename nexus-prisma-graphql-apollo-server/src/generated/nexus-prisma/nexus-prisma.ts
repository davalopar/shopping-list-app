/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Item: ItemObject
      ItemConnection: ItemConnectionObject
      PageInfo: PageInfoObject
      ItemEdge: ItemEdgeObject
      AggregateItem: AggregateItemObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      ItemSubscriptionPayload: ItemSubscriptionPayloadObject
      ItemPreviousValues: ItemPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Item: ItemFieldDetails
      ItemConnection: ItemConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      ItemEdge: ItemEdgeFieldDetails
      AggregateItem: AggregateItemFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      ItemSubscriptionPayload: ItemSubscriptionPayloadFieldDetails
      ItemPreviousValues: ItemPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      ItemWhereUniqueInput: ItemWhereUniqueInputInputObject
      ItemWhereInput: ItemWhereInputInputObject
      ItemCreateInput: ItemCreateInputInputObject
      ItemUpdateInput: ItemUpdateInputInputObject
      ItemUpdateManyMutationInput: ItemUpdateManyMutationInputInputObject
      ItemSubscriptionWhereInput: ItemSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ItemOrderByInput: ItemOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'item', args?: QueryItemArgs[] | false, alias?: string  } 
  | { name: 'items', args?: QueryItemsArgs[] | false, alias?: string  } 
  | { name: 'itemsConnection', args?: QueryItemsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'item'
  | 'items'
  | 'itemsConnection'


type QueryItemArgs =
  | 'where'
type QueryItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  item: {
    type: 'Item'
    args: Record<QueryItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  items: {
    type: 'Item'
    args: Record<QueryItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item[]> | prisma.Item[]
  }
  itemsConnection: {
    type: 'ItemConnection'
    args: Record<QueryItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemConnection> | prisma.ItemConnection
  }
}
  

// Types for Item

type ItemObject =
  | ItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ItemFields =
  | 'id'
  | 'name'



  

export interface ItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ItemConnection

type ItemConnectionObject =
  | ItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemEdge[]> | prisma.ItemEdge[]
  }
  aggregate: {
    type: 'AggregateItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateItem> | prisma.AggregateItem
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ItemEdge

type ItemEdgeObject =
  | ItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ItemEdgeFieldDetails {
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateItem

type AggregateItemObject =
  | AggregateItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateItemFields =
  | 'count'



  

export interface AggregateItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createItem', args?: MutationCreateItemArgs[] | false, alias?: string  } 
  | { name: 'updateItem', args?: MutationUpdateItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyItems', args?: MutationUpdateManyItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertItem', args?: MutationUpsertItemArgs[] | false, alias?: string  } 
  | { name: 'deleteItem', args?: MutationDeleteItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyItems', args?: MutationDeleteManyItemsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createItem'
  | 'updateItem'
  | 'updateManyItems'
  | 'upsertItem'
  | 'deleteItem'
  | 'deleteManyItems'


type MutationCreateItemArgs =
  | 'data'
type MutationUpdateItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteItemArgs =
  | 'where'
type MutationDeleteManyItemsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createItem: {
    type: 'Item'
    args: Record<MutationCreateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  updateItem: {
    type: 'Item'
    args: Record<MutationUpdateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateInput, where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updateManyItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateManyMutationInput, where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertItem: {
    type: 'Item'
    args: Record<MutationUpsertItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput, create: ItemCreateInput, update: ItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  deleteItem: {
    type: 'Item'
    args: Record<MutationDeleteItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  deleteManyItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'item', args?: SubscriptionItemArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'item'


type SubscriptionItemArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  item: {
    type: 'ItemSubscriptionPayload'
    args: Record<SubscriptionItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemSubscriptionPayload | null> | prisma.ItemSubscriptionPayload | null
  }
}
  

// Types for ItemSubscriptionPayload

type ItemSubscriptionPayloadObject =
  | ItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemPreviousValues | null> | prisma.ItemPreviousValues | null
  }
}
  

// Types for ItemPreviousValues

type ItemPreviousValuesObject =
  | ItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ItemPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface ItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface ItemWhereUniqueInput {
  id?: string | null
}
export type ItemWhereUniqueInputInputObject =
  | Extract<keyof ItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: ItemWhereInput[]
  OR?: ItemWhereInput[]
  NOT?: ItemWhereInput[]
}
export type ItemWhereInputInputObject =
  | Extract<keyof ItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ItemCreateInput {
  id?: string | null
  name?: string | null
}
export type ItemCreateInputInputObject =
  | Extract<keyof ItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ItemUpdateInput {
  name?: string | null
}
export type ItemUpdateInputInputObject =
  | Extract<keyof ItemUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ItemUpdateManyMutationInput {
  name?: string | null
}
export type ItemUpdateManyMutationInputInputObject =
  | Extract<keyof ItemUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ItemWhereInput | null
  AND?: ItemSubscriptionWhereInput[]
  OR?: ItemSubscriptionWhereInput[]
  NOT?: ItemSubscriptionWhereInput[]
}
export type ItemSubscriptionWhereInputInputObject =
  | Extract<keyof ItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  